{"version":3,"file":"style-observer.esm.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * Structure holding CSS computed values. Example:\n *\n * ```json\n * {\n *     \"--my-variable\": \"1.0\",\n *     \"display\": \"block\"\n * }\n * ```\n */\nexport type CSSDeclarations = { [key: string]: string };\n\n/**\n * Type signature of observer callback.\n *\n * @param values Readonly structure containing observed CSS properties and their values\n */\nexport type CSSStyleObserverCallback = (\n  values: Readonly<CSSDeclarations>\n) => void;\n\n/**\n * Passive observer for CSS properties. Instead of typical polling approach, it uses CSS\n * transitions to detect changes.\n *\n * CSSStyleObserver can be used to build dynamic theming system, detect media etc.\n *\n * Usage:\n * ```javascript\n * const cssStyleObserver = new CSSStyleObserver(['--my-variable'], (variables) => console.log(\"Value:\",variables['--my-variable']));\n * cssStyleObserver.attach(document.body);\n * ```\n */\nexport class CSSStyleObserver {\n  /**\n   * Create a new (detached) instance of CSS variable observer.\n   *\n   * @param observedVariables list of CSS variables to observe\n   * @param callback callback that will be invoked every time any of listed CSS variables change\n   */\n  constructor(\n    observedVariables: string[],\n    callback: CSSStyleObserverCallback\n  ) {\n    this._observedVariables = observedVariables;\n    this._callback = callback;\n    this._targetElement = null;\n  }\n\n  /**\n   * Attach observer to target element. Callback will be invoked immediately with the current assigned values.\n   *\n   * @param targetElement target element\n   */\n  attach(targetElement: HTMLElement): void {\n    if (!this._targetElement) {\n      this._targetElement = targetElement;\n      this._setTargetElementStyles(this._targetElement);\n      this._targetElement.addEventListener('transitionstart', this._eventHandler);\n      this._handleUpdate();\n    }\n  }\n\n  /**\n   * Detach observer.\n   */\n  detach(): void {\n    if (this._targetElement) {\n      this._unsetTargetElementStyles(this._targetElement);\n      this._targetElement.removeEventListener('transitionstart', this._eventHandler);\n      this._targetElement = null;\n    }\n  }\n\n  /*\n   * Observer CSS variables and their iternal identifiers.\n   */\n  private _observedVariables: string[];\n\n  /*\n   * User supplied callback that receives CSS variable values.\n   */\n  private _callback: CSSStyleObserverCallback;\n\n  /*\n   * Event handler that is used to invoke callback.\n   */\n  private _eventHandler = this._handleUpdate.bind(this);\n\n  /*\n   * The element that is being observed\n   */\n  private _targetElement: HTMLElement | null;\n\n  /**\n   * Attach the styles necessary to track the changes to the given element\n   * \n   * @param targetElement The element to track\n   */\n  private _setTargetElementStyles(targetElement: HTMLElement): void {\n    const cssTransitionValue = this._observedVariables\n      .map(value => `${value} 0.001ms step-start`)\n      .join(', ');\n\n    // @TODO: Don’t overwrite the existing transition\n    targetElement.style.setProperty('transition', cssTransitionValue);\n    targetElement.style.setProperty('transition-behavior', 'allow-discrete');\n  }\n\n  /**\n   * Remove the styles that track the property changes\n   * \n   * @param targetElement The element to track\n   */\n  private _unsetTargetElementStyles(targetElement: HTMLElement): void {\n    // @TODO: Don’t remove all, only remove the tracked variables\n    targetElement.style.removeProperty('transition');\n    targetElement.style.removeProperty('transition-behavior');\n  }\n\n  /**\n   * Collect CSS variable values and invoke callback.\n   */\n  private _handleUpdate(): void {\n    console.log('_handleUpdate');\n    if (this._targetElement) {\n      const computedStyle = getComputedStyle(this._targetElement);\n\n      const variables: CSSDeclarations = {};\n\n      this._observedVariables\n        .forEach(value => {\n          variables[value] = computedStyle.getPropertyValue(value);\n        });\n\n      // Do not invoke callback if no variables are defined\n      if (Object.keys(variables).length > 0) {\n        this._callback(variables);\n      }\n    }\n  }\n}\n\nexport default CSSStyleObserver;\n"],"names":["CSSStyleObserver","observedVariables","callback","_handleUpdate","bind","_observedVariables","_callback","_targetElement","_proto","prototype","attach","targetElement","_setTargetElementStyles","addEventListener","_eventHandler","detach","_unsetTargetElementStyles","removeEventListener","cssTransitionValue","map","value","join","style","setProperty","removeProperty","console","log","computedStyle","getComputedStyle","variables","forEach","getPropertyValue","Object","keys","length"],"mappings":"AAqBA;;;;;;;;;;;;IAYaA,gBAAgB;;;;;;;EAO3B,SAAAA,iBACEC,iBAA2B,EAC3BC,QAAkC;;;;IA6C5B,kBAAa,GAAG,IAAI,CAACC,aAAa,CAACC,IAAI,CAAC,IAAI,CAAC;IA3CnD,IAAI,CAACC,kBAAkB,GAAGJ,iBAAiB;IAC3C,IAAI,CAACK,SAAS,GAAGJ,QAAQ;IACzB,IAAI,CAACK,cAAc,GAAG,IAAI;;;;;;;EAG5B,IAAAC,MAAA,GAAAR,gBAAA,CAAAS,SAAA;EAAAD,MAAA,CAKAE,MAAM,GAAN,SAAAA,OAAOC,aAA0B;IAC/B,IAAI,CAAC,IAAI,CAACJ,cAAc,EAAE;MACxB,IAAI,CAACA,cAAc,GAAGI,aAAa;MACnC,IAAI,CAACC,uBAAuB,CAAC,IAAI,CAACL,cAAc,CAAC;MACjD,IAAI,CAACA,cAAc,CAACM,gBAAgB,CAAC,iBAAiB,EAAE,IAAI,CAACC,aAAa,CAAC;MAC3E,IAAI,CAACX,aAAa,EAAE;;;;;;EAIxBK,MAAA,CAGAO,MAAM,GAAN,SAAAA;IACE,IAAI,IAAI,CAACR,cAAc,EAAE;MACvB,IAAI,CAACS,yBAAyB,CAAC,IAAI,CAACT,cAAc,CAAC;MACnD,IAAI,CAACA,cAAc,CAACU,mBAAmB,CAAC,iBAAiB,EAAE,IAAI,CAACH,aAAa,CAAC;MAC9E,IAAI,CAACP,cAAc,GAAG,IAAI;;;;;;;;EAwB9BC,MAAA,CAKQI,uBAAuB,GAAvB,SAAAA,wBAAwBD,aAA0B;IACxD,IAAMO,kBAAkB,GAAG,IAAI,CAACb,kBAAkB,CAC/Cc,GAAG,CAAC,UAAAC,KAAK;MAAA,OAAOA,KAAK;KAAqB,CAAC,CAC3CC,IAAI,CAAC,IAAI,CAAC;;IAGbV,aAAa,CAACW,KAAK,CAACC,WAAW,CAAC,YAAY,EAAEL,kBAAkB,CAAC;IACjEP,aAAa,CAACW,KAAK,CAACC,WAAW,CAAC,qBAAqB,EAAE,gBAAgB,CAAC;;;;;;;EAG1Ef,MAAA,CAKQQ,yBAAyB,GAAzB,SAAAA,0BAA0BL,aAA0B;;IAE1DA,aAAa,CAACW,KAAK,CAACE,cAAc,CAAC,YAAY,CAAC;IAChDb,aAAa,CAACW,KAAK,CAACE,cAAc,CAAC,qBAAqB,CAAC;;;;;EAG3DhB,MAAA,CAGQL,aAAa,GAAb,SAAAA;IACNsB,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;IAC5B,IAAI,IAAI,CAACnB,cAAc,EAAE;MACvB,IAAMoB,aAAa,GAAGC,gBAAgB,CAAC,IAAI,CAACrB,cAAc,CAAC;MAE3D,IAAMsB,SAAS,GAAoB,EAAE;MAErC,IAAI,CAACxB,kBAAkB,CACpByB,OAAO,CAAC,UAAAV,KAAK;QACZS,SAAS,CAACT,KAAK,CAAC,GAAGO,aAAa,CAACI,gBAAgB,CAACX,KAAK,CAAC;OACzD,CAAC;;MAGJ,IAAIY,MAAM,CAACC,IAAI,CAACJ,SAAS,CAAC,CAACK,MAAM,GAAG,CAAC,EAAE;QACrC,IAAI,CAAC5B,SAAS,CAACuB,SAAS,CAAC;;;GAG9B;EAAA,OAAA7B,gBAAA;AAAA;;;;;"}